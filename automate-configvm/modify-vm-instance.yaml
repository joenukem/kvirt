---
# modify-vm-instance.yaml
#
# This playbook modifies the instance type of a virtual machine that was created by using an instance type.
# The instance type defines the CPU and memory that are allocated for the virtual machine.
#
# The playbook performs the following tasks:
#
# - Print the initial VM status, the CPU and memory parameters.
# - Stop the virtual machine.
# - Modify the virtual machine parameters.
# - Start the virtual machine.
# - Print the final VM status, the CPU and memory parameters.
#
# This playbook uses the 'redhat.openshift_virtualization.kubevirt_vm' module to set the `instancetype` parameter.
# The `revisionName` parameter is set to `null` to allow the change of the instance type.
#
# Refer to the documentation for more information:
#
# https://console.redhat.com/ansible/automation-hub/repo/published/redhat/openshift_virtualization/content/module/kubevirt_vm/?version=1.2.3

- name: Modify VM Instance
  hosts: localhost
  gather_facts: false

  vars:
    # NOTE: The following variables should be provided to this playbook
    # target_ns: automate-configvm
    # vm_instance: rhel9-instance
    # instance_type: u1.small

    wait_sleep: 10
    wait_timeout: 60
    retries_num: 30
    delay_seconds: 10

  tasks:

    - name: VM info
      block:

        - name: "Get VM info: {{ vm_instance }}"
          kubernetes.core.k8s_info:
            api_version: kubevirt.io/v1
            kind: VirtualMachine
            name: "{{ vm_instance }}"
            namespace: "{{ target_ns }}"
          register: vm_instance_info

        - name: "Print VM info: {{ vm_instance }}"
          ansible.builtin.debug:
            var: vm_info
          vars:
            vm_info:
              instancetype: "{{ vm_instance_info.resources[0]['spec']['instancetype'] }}"
          when:
            - vm_instance_info.resources is defined
            - vm_instance_info.resources | length > 0
            - vm_instance_info.resources[0]['spec'] is defined
            - vm_instance_info.resources[0]['spec']['instancetype'] is defined

    - name: VM stop
      block:

        - name: "Stop VM: {{ vm_instance }}"
          kubernetes.core.k8s_json_patch:
            api_version: kubevirt.io/v1
            kind: VirtualMachine
            name: "{{ vm_instance }}"
            namespace: "{{ target_ns }}"
            patch:
              - op: replace
                path: /spec/running
                value: false

        - name: "Wait until the VM is stopped: {{ vm_instance }}"
          redhat.openshift_virtualization.kubevirt_vm_info:
            name: "{{ vm_instance }}"
            namespace: "{{ target_ns }}"
            wait: false
          register: vm_instance_info
          until:
            - vm_instance_info.resources is defined
            - vm_instance_info.resources | length > 0
            - vm_instance_info.resources[0]['status']['ready'] is not defined
            - vm_instance_info.resources[0]['status']['printableStatus'] is defined
            - vm_instance_info.resources[0]['status']['printableStatus'] == 'Stopped'
            - vm_instance_info.resources[0]['status']['runStrategy'] is defined
            - vm_instance_info.resources[0]['status']['runStrategy'] == 'Halted'
          retries: "{{ retries_num }}"
          delay: "{{ delay_seconds }}"

    - name: VM modify
      block:

        # FIXME: Uncomment the parameters to modify the VM instance type
        - name: "Modify VirtualMachine: {{ vm_instance }}"
          redhat.openshift_virtualization.kubevirt_vm:
            state: present
            name: "{{ vm_instance }}"
            namespace: "{{ target_ns }}"
            # instancetype:
            #   name: "{{ instance_type }}"
            #   revisionName: null
            # preference:
            #   revisionName: null

    - name: VM start
      block:

        - name: "Start VM again: {{ vm_instance }}"
          kubernetes.core.k8s_json_patch:
            api_version: kubevirt.io/v1
            kind: VirtualMachine
            name: "{{ vm_instance }}"
            namespace: "{{ target_ns }}"
            patch:
              - op: replace
                path: /spec/running
                value: true
          when:
            - vm_instance_info.resources | length > 0

        - name: "Wait until the VM is running again: {{ vm_instance }}"
          kubernetes.core.k8s_info:
            api_version: kubevirt.io/v1
            kind: VirtualMachine
            name: "{{ vm_instance }}"
            namespace: "{{ target_ns }}"
            wait: false
          register: vm_instance_info
          until:
            - vm_instance_info.resources is defined
            - vm_instance_info.resources | length > 0
            - vm_instance_info.resources[0]['status']['ready'] is defined
            - vm_instance_info.resources[0]['status']['ready'] == true
            - vm_instance_info.resources[0]['status']['printableStatus'] is defined
            - vm_instance_info.resources[0]['status']['printableStatus'] == 'Running'
          retries: "{{ retries_num }}"
          delay: "{{ delay_seconds }}"

    - name: VM info
      block:

        - name: "Get VM info: {{ vm_instance }}"
          kubernetes.core.k8s_info:
            api_version: kubevirt.io/v1
            kind: VirtualMachine
            name: "{{ vm_instance }}"
            namespace: "{{ target_ns }}"
          register: vm_instance_info

        - name: "Print VM info: {{ vm_instance }}"
          ansible.builtin.debug:
            var: vm_info
          vars:
            vm_info:
              instancetype: "{{ vm_instance_info.resources[0]['spec']['instancetype'] }}"
          when:
            - vm_instance_info.resources is defined
            - vm_instance_info.resources | length > 0
            - vm_instance_info.resources[0]['spec'] is defined
            - vm_instance_info.resources[0]['spec']['instancetype'] is defined
